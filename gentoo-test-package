#!/usr/bin/env python


def massage_string(string):
    """Return a string."""

    import sys

    if sys.version_info[0] < 3:
        return string
    else:
        return string.decode("UTF-8")


class Docker:

    def __init__(self):
        """Create a new container."""

        import subprocess

        docker = subprocess.Popen(
            ["docker", "run", "--detach", "--tty",
                "--volume=/home/nbock/gentoo:/usr/portage",
                "--volume=/usr/portage/distfiles:/usr/portage/distfiles",
                "gentoo/stage3-amd64-nomultilib"], stdout=subprocess.PIPE)
        docker.wait()
        if docker.returncode != 0:
            raise Exception("failure creating docker container")
        lines = docker.stdout.readlines()
        if len(lines) > 1:
            raise Exception("more output than expected")
        self.cid = massage_string(lines[0]).strip()

    def exec(self, cmd, interactive=False):
        """Execute command in container.

        cmd is a string which is executed within a bash shell.
        """

        import subprocess

        print("running \"%s\" in container" % (cmd))
        docker_cmd = ["docker", "exec"]
        if interactive:
            docker_cmd += ["--tty", "--interactive"]
        docker_cmd += [self.cid, "/bin/bash", "-c", cmd]
        docker = subprocess.Popen(docker_cmd)
        docker.wait()
        if docker.returncode != 0:
            raise Exception("failed command \"%s\"" % (cmd))

    def shell(self):
        """Run an interactive shell in container."""

        import subprocess

        print("running interactive shell in container")
        docker = subprocess.Popen(["docker", "exec", "--tty", "--interactive",
                                  self.cid, "/bin/bash"])
        docker.wait()


def main():
    """The main function."""

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "ATOM",
        help="The package atom to test")
    parser.add_argument(
        "--use",
        help="The use flags for the ATOM",
        nargs="+")
    options = parser.parse_args()
    print("creating container")
    container = Docker()
    print("created container " + container.cid)
    container.exec(
        "echo \"%s\" ~amd64 >> /etc/portage/package.accept_keywords" %
        (options.ATOM))
    container.exec("cat /etc/portage/package.accept_keywords")
    if not (options.use is None) and len(options.use) > 0:
        container.exec("echo %s %s >> /etc/portage/package.use/testbuild" %
                       (options.ATOM, " ".join(options.use)))
    container.exec("emerge --ask --verbose %s" % (options.ATOM),
                   interactive=True)
    container.shell()


if __name__ == "__main__":
    main()
else:
    raise Exception("can not be imported")
